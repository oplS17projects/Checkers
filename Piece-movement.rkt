#lang racket
(require "board.rkt")
(require "xlsx-import-export.rkt")

(define (get-board-element row column) ;;should probably rename this
  (get-element (- column 1) (get-row (- row 1) board)))
  
(define (move-piece tile1 tile2)
  (cond ((or (equal? tile1 '()) (equal? tile2 '()))
         "Attempted illegal move: invalid co-ordinates -- move-piece")
    ((equal? (tile1 'get-piece) 'red)
         (cond ((equal? (tile2 'get-piece) 'none)
                (begin
                  ((tile1 'set-piece) 'none)
                  ((tile2 'set-piece) 'red)
                  'piece-moved))
                ((equal? (tile2 'get-piece) 'black) (capture tile1 tile2))
                (else "Attempted illegal move: destination occupied -- move-piece")))
         ((equal? (tile1 'get-piece) 'black)
          (cond ((equal? (tile2 'get-piece) 'none)
                 (begin
                  ((tile1 'set-piece) 'none)
                  ((tile2 'set-piece) 'black)
                  'piece-moved))
                ((equal? (tile2 'get-piece) 'red) (capture tile1 tile2))
                (else "Attempted illegal move: destination occupied -- move-piece")))
          (else "Attempted illegal move: no piece at start -- move-piece")))

(define (capture tile1 tile2)
  (define tile3 (get-board-element (+ (tile2 'get-row) (- (tile2 'get-row) (tile1 'get-row)))
                                   (+ (tile2 'get-column) (- (tile2 'get-column) (tile1 'get-column)))))
  (cond ((equal? tile3 '()) "Invalid co-ordinates -- capture")
        ((equal? (tile3 'get-piece) 'none)
         (cond ((equal? (tile1 'get-piece) 'red)
                (begin
                  ((tile1 'set-piece) 'none)
                  ((tile2 'set-piece) 'none)
                  ((tile3 'set-piece) 'red)
                  'piece-captured))
               ((equal? (tile1 'get-piece) 'black)
                (begin
                  ((tile1 'set-piece) 'none)
                  ((tile2 'set-piece) 'none)
                  ((tile3 'set-piece) 'black)))
               (else "no piece at start -- capture")))
        (else "destination is occupied -- capture")))

(define (move-in-direction tile direction)
  (cond ((equal? direction 'north)
         (move-piece tile (get-board-element (- (tile 'get-row) 1) (tile 'get-column))))
        ((equal? direction 'south)
         (move-piece tile (get-board-element (+ (tile 'get-row) 1) (tile 'get-column))))
        ((equal? direction 'east)
         (move-piece tile (get-board-element (tile 'get-row) (+ (tile 'get-column) 1))))
        ((equal? direction 'west)
         (move-piece tile (get-board-element (tile 'get-row) (- (tile 'get-column) 1))))
        ((equal? direction 'north-east)
         (move-piece tile (get-board-element (- (tile 'get-row) 1) (+ (tile 'get-column) 1))))
        ((equal? direction 'north-west)
         (move-piece tile (get-board-element (- (tile 'get-row) 1) (- (tile 'get-column) 1))))
        ((equal? direction 'south-east)
         (move-piece tile (get-board-element (+ (tile 'get-row) 1) (+ (tile 'get-column) 1))))
        ((equal? direction 'south-west)
         (move-piece tile (get-board-element (+ (tile 'get-row) 1) (- (tile 'get-column) 1))))
        (else "invalid direction -- move-in-direction")))